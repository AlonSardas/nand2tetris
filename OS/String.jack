// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array string;
    field int currentLength, maxLength;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLengthArg) {
        if (maxLengthArg < 0) {
            do Sys.error(14);
        }

        let maxLength = maxLengthArg;
        let currentLength = 0;
        
        // For some reason, 0 size string is supported but 0-sized array are not
        if (maxLength > 0) {
            let string = Array.new(maxLength);
        }

        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (maxLength > 0) {
            do string.dispose();
        }
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return currentLength;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if ((j < 0) | (j > currentLength)) {
            do Sys.error(15);
        }
        return string[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if ((j < 0) | (j > currentLength)) {
            do Sys.error(16);
        }
        let string[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (currentLength < maxLength) {
            let string[currentLength] = c;
            let currentLength = currentLength + 1;
        } else {
            do Sys.error(17);
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (currentLength > 0) {
            let currentLength = currentLength - 1;
        } else {
            do Sys.error(18);
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, val, digit;
        var boolean minus;

        if ((currentLength > 0) & (string[i] = 45)) {
            let minus = true;
            let i = i + 1;
        }

        while (i < currentLength) {
            let digit = string[i] - 48;
            if ((digit < 0) | (digit > 9)) {
                return val;
            }

            let val = val * 10 + digit;
            let i = i+1;
        }


        if (minus) {
            return -val;
        }
        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        if (val > 0) {
            let currentLength = 0;
        } else {
            let currentLength = 1;
            let string[0] = 45;  // '-'
            let val = -val;
        }
        do int2String(val);
        return;
    }

    method void int2String(int val) {
        var int lastDigit, valDiv10;
        var char c;

        let valDiv10 = val / 10;

        let lastDigit = val - (valDiv10 * 10);
        let c = lastDigit + 48;  // '0'
        if (val > 10) {
            if (currentLength = maxLength) {
                do Sys.error(19);
                return;
            }
            do int2String(valDiv10);
        }
        
        let string[currentLength] = c;
        let currentLength = currentLength + 1;
    
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
